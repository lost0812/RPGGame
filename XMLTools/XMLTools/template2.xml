<?xml version="1.0" encoding="UTF-8"?>

<!--
param:
lower -> 小写
upper -> 大写
list  -> 数组（必定有gap属性）




xml字符转义:
&amp;	     &
&lt;	     <
&gt;	     >
&quot;	   "
&apos;     '
-->



<!-------------->
<!-- 基础数据 -->
<!-------------->

<class type="class">
<base name="class_name"       attr="name"/>
<base name="class_name_lower" attr="name" param="lower"/>
<base name="class_name_upper" attr="name" param="upper"/>

<property>
	<base name="property_name"       attr="name"/>
	<base name="property_lower_name" attr="name" param="lower"/>
	<base name="property_upper_name" attr="name" param="upper"/>
	<base name="property_type"       attr="type"/>
	<base name="property_default"    attr="default" default="0"/>
</property>

<!-- init函数的参数列表 -->
<compose name="init_para_declaration" ref="property" gap=",">
const #property_type# #property_lower_name#
</compose>

<!-- Get函数 -->
<compose name="get_function" ref="property" gap="">
    inline const #property_type# Get#property_name#() const{return m_#property_lower_name#;}

</compose>

<!-- Set函数 -->
<compose name="set_function" ref="property" gap="">
    inline void Set#property_name#(const #property_type# #property_lower_name#){m_#property_lower_name#=#property_lower_name#;}

</compose>

<!-- 成员变量声明 -->
<compose name="property_declaration" ref="property" gap="">
    #property_type# m_#property_lower_name#;

</compose>

<!-- 空构造函数的初始化列表 -->
<compose name="create_null_init_list" ref="property" gap=",">
m_#property_lower_name#(#property_default#)

</compose>

<!-- 空构造函数的初始化列表 -->
<compose name="init_null_assignment" ref="property" gap="">
    m_#property_lower_name# = #property_default#;

</compose>

<!-- 空init函数的赋值 -->
<compose name="init_null_assignment" ref="property" gap="">
    m_#property_lower_name# = #property_default#;

</compose>

<!-- 拷贝init函数的赋值 -->
<compose name="init_self_assignment" ref="property" gap="">
    m_#property_lower_name# = #class_name_lower#.m_#property_lower_name#;

</compose>

<!-- 参数init函数的赋值 -->
<compose name="init_para_assignment" ref="property" gap="">
    m_#property_lower_name# = #property_lower_name#;

</compose>

<enum>	
	<base name="enum_name" attr="name"/>
	<property>
		<base name="enum_property_name"  attr="name"/>
		<base name="enum_property_value" attr="value"/>
	</property>
	
	<compose name="declare_enum_property" ref="property" gap=",">

        #enum_property_name# = #enum_property_value#
	</compose>
		
</enum>

<compose name="inner_enum_list" ref="enum" gap="">
  enum #enum_name#
  {#declare_enum_property#
  };
</compose>


<struct>
	<base name="struct_name" attr="name"/>
	<property>
		<base name="struct_property_name"  attr="name"/>
		<base name="struct_property_type" attr="type"/>
	</property>
	<compose name="declare_struct_property" ref="property" gap="">

        #struct_property_type# #struct_property_name#;
	</compose>
</struct>

<compose name="inner_struct_list" ref="struct" gap="">
  struct #struct_name#
  {#declare_struct_property#
  };
</compose>

</class>

<!-------------->
<!-- 生成文件 -->
<!-------------->
<cpp_head type="file" file="#class_name#.h">
#ifndef __#class_name_upper#_H__  
#define __#class_name_upper#_H__  

#include &lt;string&gt; 
  
using std::string;
class #class_name#  
{  
public:  
    #class_name#();  
    ~#class_name#();  
       
public:
#inner_enum_list#

#inner_struct_list#
public:  
    virtual bool Init();  
    virtual bool Init(const #class_name# &amp;#class_name_lower#);  
    virtual bool Init(#init_para_declaration#);  
      
  
    virtual string ToString()const;  
    virtual bool FromString(const string sBuffer);  
      
public:    
#get_function#
#set_function#
private:  
#property_declaration#  
};  
  
#endif //__#class_name_upper#_H__
</cpp_head>


<!-- 生成文件 -->
<cpp_source type="file" file="#class_name#.cpp">
#include &quot;#class_name#.h&quot;

#class_name#::#class_name#()
:#create_null_init_list#  
{  
  
}  
  
#class_name#::~#class_name#()  
{  
  
}  
  
bool #class_name#::Init()  
{  
#init_null_assignment#
    return true;  
}  
  
bool #class_name#::Init(const #class_name# &amp;#class_name_lower#)  
{  
#init_self_assignment#
    return true;  
}  
      
bool #class_name#::Init(#init_para_declaration#)  
{  
#init_para_assignment#
    return true;  
}  
      
string #class_name#::ToString()const
{  
    char csBuffer[10240] = {&apos;\0&apos;};  
    return csBuffer;  
}  
  
bool #class_name#::FromString(const string sBuffer)
{  
    return true;  
}  
  
</cpp_source>
