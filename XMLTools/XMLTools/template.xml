<?xml version="1.0" encoding="UTF-8"?>

<!--
param:
lower -> 小写
upper -> 大写
list  -> 数组（必定有gap属性）




xml字符转义:
&amp;	     &
&lt;	     <
&gt;	     >
&quot;	   "
&apos;     '
-->


<!-------------->
<!-- 基础数据 -->
<!-------------->
<class_name type="base" node="class" attr="name"/>
<class_lower_name type="base" node="class" attr="name" param="lower"/>
<class_upper_name type="base" node="class" attr="name" param="upper"/>

<property type="baselist">
	<property_name type="base" node="property" attr="name"/>
	<property_lower_name type="base" node="property" attr="name" param="lower"/>
	<property_upper_name type="base" node="property" attr="name" param="upper"/>
	<!--<propertyprefix node="property" attr="prefix"/>-->
	<property_type type="base" node="property" attr="type"/>
	<property_default type="base" node="property" attr="default" default="0"/>
</property>


<!-------------->
<!-- 合成数据 -->
<!-------------->

<!-- init函数的参数列表 -->
<init_para_declaration type="compose" param="list" gap=",">
const #property_type #property_lower_name
</init_para_declaration>


<!-- Get函数 -->
<get_function type="compose" param="list" gap="">
    inline const #property_type Get#property_name() const{return m_#property_lower_name;}

</get_function>

<!-- Set函数 -->
<set_function type="compose" param="list" gap="">
    inline void Set#property_name(const #property_type #property_lower_name){m_#property_lower_name=#property_lower_name;}

</set_function>

<!-- 成员变量声明 -->
<property_declaration type="compose" param="list" gap="">
    #property_type m_#property_lower_name;

</property_declaration>

<!-- 空构造函数的初始化列表 -->
<create_null_init_list type="compose" param="list" gap=",">
m_#property_lower_name(#property_default)

</create_null_init_list>

<!-- 空构造函数的初始化列表 -->
<init_null_assignment type="compose" param="list" gap="">
    m_#property_lower_name = #property_default;

</init_null_assignment>

<!-- 空init函数的赋值 -->
<init_null_assignment type="compose" param="list" gap="">
    m_#property_lower_name = #property_default;

</init_null_assignment>

<!-- 拷贝init函数的赋值 -->
<init_self_assignment type="compose" param="list" gap="">
    m_#property_lower_name = #class_lower_name.m_#property_lower_name;

</init_self_assignment>

<!-- 参数init函数的赋值 -->
<init_para_assignment type="compose" param="list" gap="">
    m_#property_lower_name = #property_lower_name;

</init_para_assignment>
<!-------------->
<!-- 生成文件 -->
<!-------------->
<cpp_head type="file" file="#class_name.h">
#ifndef __#class_upper_name_H__  
#define __#class_upper_name_H__  

#include &lt;string&gt; 
  
using std::string;
class #class_name  
{  
public:  
    #class_name();  
    ~#class_name();  
       
public:  
    virtual bool Init();  
    virtual bool Init(const #class_name &amp;#class_lower_name);  
    virtual bool Init(#init_para_declaration);  
      
  
    virtual string ToString()const;  
    virtual bool FromString(const string sBuffer);  
      
public:    
#get_function
#set_function
private:  
#property_declaration  
};  
  
#endif //__#class_upper_name_H__
</cpp_head>


<!-- 生成文件 -->
<cpp_source type="file" file="#class_name.cpp">
#include &quot;#class_name.h&quot;

#class_name::#class_name()
:#create_null_init_list  
{  
  
}  
  
#class_name::~#class_name()  
{  
  
}  
  
bool #class_name::Init()  
{  
#init_null_assignment
    return true;  
}  
  
bool #class_name::Init(const #class_name &amp;#class_lower_name)  
{  
#init_self_assignment
    return true;  
}  
      
bool #class_name::Init(#init_para_declaration)  
{  
#init_para_assignment
    return true;  
}  
      
string #class_name::ToString()const
{  
    char csBuffer[10240] = {&apos;\0&apos;};  
    return csBuffer;  
}  
  
bool #class_name::FromString(const string sBuffer)
{  
    return true;  
}  
  
</cpp_source>
